{"version":3,"sources":["/Users/froglegg/Desktop/funStuff/apps/angularApps/weatherStation/client/node_modules/ngx-skycons/fesm2015/ngx-skycons.js"],"names":[],"mappingsmGAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;CAOD;;;;;;;;;0BAOC","file":"ngx-skycons.js","sourcesContent":["import { Component, ViewChild, Input, NgModule } from '@angular/core';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {string} */\r\nconst SkyconsTypes = {\r\n    CLEAR_DAY: 'CLEARDAY',\r\n    CLEAR_NIGHT: 'CLEARNIGHT',\r\n    PARTLY_CLOUDY_DAY: 'PARTLYCLOUDYDAY',\r\n    PARTLY_CLOUDY_NIGHT: 'PARTLYCLOUDYNIGHT',\r\n    CLOUDY: 'CLOUDY',\r\n    RAIN: 'RAIN',\r\n    SLEET: 'SLEET',\r\n    SNOW: 'SNOW',\r\n    WIND: 'WIND',\r\n    FOG: 'FOG',\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst KEYFRAME = 500;\r\n/** @type {?} */\r\nconst STROKE = 0.08;\r\n/** @type {?} */\r\nconst TAU = 2.0 * Math.PI;\r\n/** @type {?} */\r\nconst TWO_OVER_SQRT_2 = 2.0 / Math.sqrt(2);\r\nclass SkyconsComponent {\r\n    constructor() {\r\n        this.list = [];\r\n        this.raf = window.requestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame;\r\n        this.caf = window.cancelAnimationFrame ||\r\n            window.webkitCancelAnimationFrame;\r\n        this.WIND_PATHS = [\r\n            [\r\n                -0.7500, -0.1800, -0.7219, -0.1527, -0.6971, -0.1225,\r\n                -0.6739, -0.0910, -0.6516, -0.0588, -0.6298, -0.0262,\r\n                -0.6083, 0.0065, -0.5868, 0.0396, -0.5643, 0.0731,\r\n                -0.5372, 0.1041, -0.5033, 0.1259, -0.4662, 0.1406,\r\n                -0.4275, 0.1493, -0.3881, 0.1530, -0.3487, 0.1526,\r\n                -0.3095, 0.1488, -0.2708, 0.1421, -0.2319, 0.1342,\r\n                -0.1943, 0.1217, -0.1600, 0.1025, -0.1290, 0.0785,\r\n                -0.1012, 0.0509, -0.0764, 0.0206, -0.0547, -0.0120,\r\n                -0.0378, -0.0472, -0.0324, -0.0857, -0.0389, -0.1241,\r\n                -0.0546, -0.1599, -0.0814, -0.1876, -0.1193, -0.1964,\r\n                -0.1582, -0.1935, -0.1931, -0.1769, -0.2157, -0.1453,\r\n                -0.2290, -0.1085, -0.2327, -0.0697, -0.2240, -0.0317,\r\n                -0.2064, 0.0033, -0.1853, 0.0362, -0.1613, 0.0672,\r\n                -0.1350, 0.0961, -0.1051, 0.1213, -0.0706, 0.1397,\r\n                -0.0332, 0.1512, 0.0053, 0.1580, 0.0442, 0.1624,\r\n                0.0833, 0.1636, 0.1224, 0.1615, 0.1613, 0.1565,\r\n                0.1999, 0.1500, 0.2378, 0.1402, 0.2749, 0.1279,\r\n                0.3118, 0.1147, 0.3487, 0.1015, 0.3858, 0.0892,\r\n                0.4236, 0.0787, 0.4621, 0.0715, 0.5012, 0.0702,\r\n                0.5398, 0.0766, 0.5768, 0.0890, 0.6123, 0.1055,\r\n                0.6466, 0.1244, 0.6805, 0.1440, 0.7147, 0.1630,\r\n                0.7500, 0.1800\r\n            ],\r\n            [\r\n                -0.7500, 0.0000, -0.7033, 0.0195, -0.6569, 0.0399,\r\n                -0.6104, 0.0600, -0.5634, 0.0789, -0.5155, 0.0954,\r\n                -0.4667, 0.1089, -0.4174, 0.1206, -0.3676, 0.1299,\r\n                -0.3174, 0.1365, -0.2669, 0.1398, -0.2162, 0.1391,\r\n                -0.1658, 0.1347, -0.1157, 0.1271, -0.0661, 0.1169,\r\n                -0.0170, 0.1046, 0.0316, 0.0903, 0.0791, 0.0728,\r\n                0.1259, 0.0534, 0.1723, 0.0331, 0.2188, 0.0129,\r\n                0.2656, -0.0064, 0.3122, -0.0263, 0.3586, -0.0466,\r\n                0.4052, -0.0665, 0.4525, -0.0847, 0.5007, -0.1002,\r\n                0.5497, -0.1130, 0.5991, -0.1240, 0.6491, -0.1325,\r\n                0.6994, -0.1380, 0.7500, -0.1400\r\n            ]\r\n        ];\r\n        this.WIND_OFFSETS = [\r\n            { start: 0.36, end: 0.11 },\r\n            { start: 0.56, end: 0.16 }\r\n        ];\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} fn\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    requestInterval(fn, i) {\r\n        /** @type {?} */\r\n        var handle = { value: null };\r\n        /** @type {?} */\r\n        let loop = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            handle.value = this.raf(loop);\r\n            fn();\r\n        });\r\n        loop();\r\n        return handle;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} handle\r\n     * @return {?}\r\n     */\r\n    cancelInterval(handle) {\r\n        this.caf(handle.value);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} x\r\n     * @param {?} y\r\n     * @param {?} r\r\n     * @return {?}\r\n     */\r\n    circle(ctx, x, y, r) {\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, r, 0, TAU, false);\r\n        ctx.fill();\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} ax\r\n     * @param {?} ay\r\n     * @param {?} bx\r\n     * @param {?} by\r\n     * @return {?}\r\n     */\r\n    line(ctx, ax, ay, bx, by) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(ax, ay);\r\n        ctx.lineTo(bx, by);\r\n        ctx.stroke();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} rx\r\n     * @param {?} ry\r\n     * @param {?} rmin\r\n     * @param {?} rmax\r\n     * @return {?}\r\n     */\r\n    puff(ctx, t, cx, cy, rx, ry, rmin, rmax) {\r\n        /** @type {?} */\r\n        let c = Math.cos(t * TAU);\r\n        /** @type {?} */\r\n        let s = Math.sin(t * TAU);\r\n        rmax -= rmin;\r\n        this.circle(ctx, cx - s * rx, cy + c * ry + rmax * 0.5, rmin + (1 - c * 0.5) * rmax);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} rx\r\n     * @param {?} ry\r\n     * @param {?} rmin\r\n     * @param {?} rmax\r\n     * @return {?}\r\n     */\r\n    puffs(ctx, t, cx, cy, rx, ry, rmin, rmax) {\r\n        /** @type {?} */\r\n        let i;\r\n        for (i = 5; i--;)\r\n            this.puff(ctx, t + i / 5, cx, cy, rx, ry, rmin, rmax);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} cw\r\n     * @param {?} s\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    cloud(ctx, t, cx, cy, cw, s, color) {\r\n        t /= 30000;\r\n        /** @type {?} */\r\n        let a = cw * 0.21;\r\n        /** @type {?} */\r\n        let b = cw * 0.12;\r\n        /** @type {?} */\r\n        let c = cw * 0.24;\r\n        /** @type {?} */\r\n        let d = cw * 0.28;\r\n        ctx.fillStyle = color;\r\n        this.puffs(ctx, t, cx, cy, a, b, c, d);\r\n        ctx.globalCompositeOperation = 'destination-out';\r\n        this.puffs(ctx, t, cx, cy, a, b, c - s, d - s);\r\n        ctx.globalCompositeOperation = 'source-over';\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} cw\r\n     * @param {?} s\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    sun(ctx, t, cx, cy, cw, s, color) {\r\n        t /= 120000;\r\n        /** @type {?} */\r\n        let a = cw * 0.25 - s * 0.5;\r\n        /** @type {?} */\r\n        let b = cw * 0.32 + s * 0.5;\r\n        /** @type {?} */\r\n        let c = cw * 0.50 - s * 0.5;\r\n        /** @type {?} */\r\n        let i;\r\n        /** @type {?} */\r\n        let p;\r\n        /** @type {?} */\r\n        let cos;\r\n        /** @type {?} */\r\n        let sin;\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = s;\r\n        ctx.lineCap = \"round\";\r\n        ctx.lineJoin = \"round\";\r\n        ctx.beginPath();\r\n        ctx.arc(cx, cy, a, 0, TAU, false);\r\n        ctx.stroke();\r\n        for (i = 8; i--;) {\r\n            p = (t + i / 8) * TAU;\r\n            cos = Math.cos(p);\r\n            sin = Math.sin(p);\r\n            this.line(ctx, cx + cos * b, cy + sin * b, cx + cos * c, cy + sin * c);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} cw\r\n     * @param {?} s\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    moon(ctx, t, cx, cy, cw, s, color) {\r\n        t /= 15000;\r\n        /** @type {?} */\r\n        let a = cw * 0.29 - s * 0.5;\r\n        /** @type {?} */\r\n        let b = cw * 0.05;\r\n        /** @type {?} */\r\n        let c = Math.cos(t * TAU);\r\n        /** @type {?} */\r\n        let p = c * TAU / -16;\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = s;\r\n        ctx.lineCap = \"round\";\r\n        ctx.lineJoin = \"round\";\r\n        cx += c * b;\r\n        ctx.beginPath();\r\n        ctx.arc(cx, cy, a, p + TAU / 8, p + TAU * 7 / 8, false);\r\n        ctx.arc(cx + Math.cos(p) * a * TWO_OVER_SQRT_2, cy + Math.sin(p) * a * TWO_OVER_SQRT_2, a, p + TAU * 5 / 8, p + TAU * 3 / 8, true);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} cw\r\n     * @param {?} s\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    _rain(ctx, t, cx, cy, cw, s, color) {\r\n        t /= 1350;\r\n        /** @type {?} */\r\n        let a = cw * 0.16;\r\n        /** @type {?} */\r\n        let b = TAU * 11 / 12;\r\n        /** @type {?} */\r\n        let c = TAU * 7 / 12;\r\n        /** @type {?} */\r\n        let i;\r\n        /** @type {?} */\r\n        let p;\r\n        /** @type {?} */\r\n        let x;\r\n        /** @type {?} */\r\n        let y;\r\n        ctx.fillStyle = color;\r\n        for (i = 4; i--;) {\r\n            p = (t + i / 4) % 1;\r\n            x = cx + ((i - 1.5) / 1.5) * (i === 1 || i === 2 ? -1 : 1) * a;\r\n            y = cy + p * p * cw;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x, y - s * 1.5);\r\n            ctx.arc(x, y, s * 0.75, b, c, false);\r\n            ctx.fill();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} cw\r\n     * @param {?} s\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    _sleet(ctx, t, cx, cy, cw, s, color) {\r\n        t /= 750;\r\n        /** @type {?} */\r\n        let a = cw * 0.1875;\r\n        /** @type {?} */\r\n        let i;\r\n        /** @type {?} */\r\n        let p;\r\n        /** @type {?} */\r\n        let x;\r\n        /** @type {?} */\r\n        let y;\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = s * 0.5;\r\n        ctx.lineCap = \"round\";\r\n        ctx.lineJoin = \"round\";\r\n        for (i = 4; i--;) {\r\n            p = (t + i / 4) % 1;\r\n            x = Math.floor(cx + ((i - 1.5) / 1.5) * (i === 1 || i === 2 ? -1 : 1) * a) + 0.5;\r\n            y = cy + p * cw;\r\n            this.line(ctx, x, y - s * 1.5, x, y + s * 1.5);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} cw\r\n     * @param {?} s\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    _snow(ctx, t, cx, cy, cw, s, color) {\r\n        t /= 3000;\r\n        /** @type {?} */\r\n        var a = cw * 0.16;\r\n        /** @type {?} */\r\n        var b = s * 0.75;\r\n        /** @type {?} */\r\n        var u = t * TAU * 0.7;\r\n        /** @type {?} */\r\n        var ux = Math.cos(u) * b;\r\n        /** @type {?} */\r\n        var uy = Math.sin(u) * b;\r\n        /** @type {?} */\r\n        var v = u + TAU / 3;\r\n        /** @type {?} */\r\n        var vx = Math.cos(v) * b;\r\n        /** @type {?} */\r\n        var vy = Math.sin(v) * b;\r\n        /** @type {?} */\r\n        var w = u + TAU * 2 / 3;\r\n        /** @type {?} */\r\n        var wx = Math.cos(w) * b;\r\n        /** @type {?} */\r\n        var wy = Math.sin(w) * b;\r\n        /** @type {?} */\r\n        var i;\r\n        /** @type {?} */\r\n        var p;\r\n        /** @type {?} */\r\n        var x;\r\n        /** @type {?} */\r\n        var y;\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = s * 0.5;\r\n        ctx.lineCap = \"round\";\r\n        ctx.lineJoin = \"round\";\r\n        for (i = 4; i--;) {\r\n            p = (t + i / 4) % 1;\r\n            x = cx + Math.sin((p + i / 4) * TAU) * a;\r\n            y = cy + p * cw;\r\n            this.line(ctx, x - ux, y - uy, x + ux, y + uy);\r\n            this.line(ctx, x - vx, y - vy, x + vx, y + vy);\r\n            this.line(ctx, x - wx, y - wy, x + wx, y + wy);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} cw\r\n     * @param {?} s\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    fogbank(ctx, t, cx, cy, cw, s, color) {\r\n        t /= 30000;\r\n        /** @type {?} */\r\n        let a = cw * 0.21;\r\n        /** @type {?} */\r\n        let b = cw * 0.06;\r\n        /** @type {?} */\r\n        let c = cw * 0.21;\r\n        /** @type {?} */\r\n        let d = cw * 0.28;\r\n        ctx.fillStyle = color;\r\n        this.puffs(ctx, t, cx, cy, a, b, c, d);\r\n        ctx.globalCompositeOperation = 'destination-out';\r\n        this.puffs(ctx, t, cx, cy, a, b, c - s, d - s);\r\n        ctx.globalCompositeOperation = 'source-over';\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} x\r\n     * @param {?} y\r\n     * @param {?} cw\r\n     * @param {?} s\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    leaf(ctx, t, x, y, cw, s, color) {\r\n        /** @type {?} */\r\n        let a = cw / 8;\r\n        /** @type {?} */\r\n        let b = a / 3;\r\n        /** @type {?} */\r\n        let c = 2 * b;\r\n        /** @type {?} */\r\n        let d = (t % 1) * TAU;\r\n        /** @type {?} */\r\n        let e = Math.cos(d);\r\n        /** @type {?} */\r\n        let f = Math.sin(d);\r\n        ctx.fillStyle = color;\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = s;\r\n        ctx.lineCap = \"round\";\r\n        ctx.lineJoin = \"round\";\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, a, d, d + Math.PI, false);\r\n        ctx.arc(x - b * e, y - b * f, c, d + Math.PI, d, false);\r\n        ctx.arc(x + c * e, y + c * f, b, d + Math.PI, d, true);\r\n        ctx.globalCompositeOperation = 'destination-out';\r\n        ctx.fill();\r\n        ctx.globalCompositeOperation = 'source-over';\r\n        ctx.stroke();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} cx\r\n     * @param {?} cy\r\n     * @param {?} cw\r\n     * @param {?} s\r\n     * @param {?} index\r\n     * @param {?} total\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    swoosh(ctx, t, cx, cy, cw, s, index, total, color) {\r\n        t /= 2500;\r\n        /** @type {?} */\r\n        let path = this.WIND_PATHS[index];\r\n        /** @type {?} */\r\n        let a = (t + index - this.WIND_OFFSETS[index].start) % total;\r\n        /** @type {?} */\r\n        let c = (t + index - this.WIND_OFFSETS[index].end) % total;\r\n        /** @type {?} */\r\n        let e = (t + index) % total;\r\n        /** @type {?} */\r\n        let b;\r\n        /** @type {?} */\r\n        let d;\r\n        /** @type {?} */\r\n        let f;\r\n        /** @type {?} */\r\n        let i;\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = s;\r\n        ctx.lineCap = \"round\";\r\n        ctx.lineJoin = \"round\";\r\n        if (a < 1) {\r\n            ctx.beginPath();\r\n            a *= path.length / 2 - 1;\r\n            b = Math.floor(a);\r\n            a -= b;\r\n            b *= 2;\r\n            b += 2;\r\n            ctx.moveTo(cx + (path[b - 2] * (1 - a) + path[b] * a) * cw, cy + (path[b - 1] * (1 - a) + path[b + 1] * a) * cw);\r\n            if (c < 1) {\r\n                c *= path.length / 2 - 1;\r\n                d = Math.floor(c);\r\n                c -= d;\r\n                d *= 2;\r\n                d += 2;\r\n                for (i = b; i !== d; i += 2)\r\n                    ctx.lineTo(cx + path[i] * cw, cy + path[i + 1] * cw);\r\n                ctx.lineTo(cx + (path[d - 2] * (1 - c) + path[d] * c) * cw, cy + (path[d - 1] * (1 - c) + path[d + 1] * c) * cw);\r\n            }\r\n            else\r\n                for (i = b; i !== path.length; i += 2)\r\n                    ctx.lineTo(cx + path[i] * cw, cy + path[i + 1] * cw);\r\n            ctx.stroke();\r\n        }\r\n        else if (c < 1) {\r\n            ctx.beginPath();\r\n            c *= path.length / 2 - 1;\r\n            d = Math.floor(c);\r\n            c -= d;\r\n            d *= 2;\r\n            d += 2;\r\n            ctx.moveTo(cx + path[0] * cw, cy + path[1] * cw);\r\n            for (i = 2; i !== d; i += 2)\r\n                ctx.lineTo(cx + path[i] * cw, cy + path[i + 1] * cw);\r\n            ctx.lineTo(cx + (path[d - 2] * (1 - c) + path[d] * c) * cw, cy + (path[d - 1] * (1 - c) + path[d + 1] * c) * cw);\r\n            ctx.stroke();\r\n        }\r\n        if (e < 1) {\r\n            e *= path.length / 2 - 1;\r\n            f = Math.floor(e);\r\n            e -= f;\r\n            f *= 2;\r\n            f += 2;\r\n            this.leaf(ctx, t, cx + (path[f - 2] * (1 - e) + path[f] * e) * cw, cy + (path[f - 1] * (1 - e) + path[f + 1] * e) * cw, cw, s, color);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    clearDay(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        this.sun(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, color);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    clearNight(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        this.moon(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, color);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    partlyCloudyDay(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        this.sun(ctx, t, w * 0.625, h * 0.375, s * 0.75, s * STROKE, color);\r\n        this.cloud(ctx, t, w * 0.375, h * 0.625, s * 0.75, s * STROKE, color);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    partlyCloudyNight(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        this.moon(ctx, t, w * 0.667, h * 0.375, s * 0.75, s * STROKE, color);\r\n        this.cloud(ctx, t, w * 0.375, h * 0.625, s * 0.75, s * STROKE, color);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    cloudy(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        this.cloud(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, color);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    rain(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        this._rain(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);\r\n        this.cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    sleet(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        this._sleet(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);\r\n        this.cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    snow(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        this._snow(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);\r\n        this.cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    wind(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        this.swoosh(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, 0, 2, color);\r\n        this.swoosh(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, 1, 2, color);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} t\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    fog(ctx, t, color) {\r\n        /** @type {?} */\r\n        let w = ctx.canvas.width;\r\n        /** @type {?} */\r\n        let h = ctx.canvas.height;\r\n        /** @type {?} */\r\n        let s = Math.min(w, h);\r\n        /** @type {?} */\r\n        let k = s * STROKE;\r\n        this.fogbank(ctx, t, w * 0.5, h * 0.32, s * 0.75, k, color);\r\n        t /= 5000;\r\n        /** @type {?} */\r\n        let a = Math.cos((t) * TAU) * s * 0.02;\r\n        /** @type {?} */\r\n        let b = Math.cos((t + 0.25) * TAU) * s * 0.02;\r\n        /** @type {?} */\r\n        let c = Math.cos((t + 0.50) * TAU) * s * 0.02;\r\n        /** @type {?} */\r\n        let d = Math.cos((t + 0.75) * TAU) * s * 0.02;\r\n        /** @type {?} */\r\n        let n = h * 0.936;\r\n        /** @type {?} */\r\n        let e = Math.floor(n - k * 0.5) + 0.5;\r\n        /** @type {?} */\r\n        let f = Math.floor(n - k * 2.5) + 0.5;\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = k;\r\n        ctx.lineCap = \"round\";\r\n        ctx.lineJoin = \"round\";\r\n        this.line(ctx, a + w * 0.2 + k * 0.5, e, b + w * 0.8 - k * 0.5, e);\r\n        this.line(ctx, c + w * 0.2 + k * 0.5, f, d + w * 0.8 - k * 0.5, f);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        this.remove();\r\n        this.ctx = this.canvas.nativeElement;\r\n        this.add();\r\n        this.play();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        this.ctx = this.canvas.nativeElement;\r\n        if (!this.color) {\r\n            this.color = '#000';\r\n        }\r\n        this.add();\r\n        this.play();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    add() {\r\n        // Return on undefined ctx.\r\n        if (!this.ctx || !this.weather) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        let obj;\r\n        /** @type {?} */\r\n        let el = this.ctx;\r\n        // Does nothing if canvas name doesn't exists\r\n        if (el === null)\r\n            return;\r\n        obj = {\r\n            element: el,\r\n            context: el.getContext(\"2d\")\r\n        };\r\n        this.list.push(obj);\r\n        this.draw(obj, KEYFRAME);\r\n    }\r\n    /**\r\n     * @param {?} obj\r\n     * @param {?} time\r\n     * @return {?}\r\n     */\r\n    draw(obj, time) {\r\n        /** @type {?} */\r\n        var canvas = obj.context.canvas;\r\n        if (this.resizeClear)\r\n            canvas.width = canvas.width;\r\n        else\r\n            obj.context.clearRect(0, 0, canvas.width, canvas.height);\r\n        // Clean weather in order to add more types and robustness\r\n        this.weather = this.weather.replace(/[_-\\s]/, '').toUpperCase();\r\n        if (this.weather.includes('DAY') && this.weather.includes('CLOUD')) {\r\n            this.weather = SkyconsTypes.PARTLY_CLOUDY_DAY;\r\n        }\r\n        else if (this.weather.includes('NIGHT') && this.weather.includes('CLOUD')) {\r\n            this.weather = SkyconsTypes.PARTLY_CLOUDY_NIGHT;\r\n        }\r\n        else if (this.weather.includes('RAIN')) {\r\n            this.weather = SkyconsTypes.RAIN;\r\n        }\r\n        switch (this.weather) {\r\n            case SkyconsTypes.CLEAR_DAY:\r\n                this.clearDay(obj.context, time, this.color);\r\n                break;\r\n            case SkyconsTypes.CLEAR_NIGHT:\r\n                this.clearNight(obj.context, time, this.color);\r\n                break;\r\n            case SkyconsTypes.PARTLY_CLOUDY_DAY:\r\n                this.partlyCloudyDay(obj.context, time, this.color);\r\n                break;\r\n            case SkyconsTypes.PARTLY_CLOUDY_NIGHT:\r\n                this.partlyCloudyNight(obj.context, time, this.color);\r\n                break;\r\n            case SkyconsTypes.CLOUDY:\r\n                this.cloudy(obj.context, time, this.color);\r\n                break;\r\n            case SkyconsTypes.RAIN:\r\n                this.rain(obj.context, time, this.color);\r\n                break;\r\n            case SkyconsTypes.SLEET:\r\n                this.sleet(obj.context, time, this.color);\r\n                break;\r\n            case SkyconsTypes.SNOW:\r\n                this.snow(obj.context, time, this.color);\r\n                break;\r\n            case SkyconsTypes.WIND:\r\n                this.wind(obj.context, time, this.color);\r\n                break;\r\n            case SkyconsTypes.FOG:\r\n                this.fog(obj.context, time, this.color);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    play() {\r\n        this.pause();\r\n        this.interval = this.requestInterval((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            let now = Date.now();\r\n            /** @type {?} */\r\n            let i;\r\n            for (i = this.list.length; i--;)\r\n                this.draw(this.list[i], now);\r\n        }), 1000 / 60);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    pause() {\r\n        if (this.interval) {\r\n            this.cancelInterval(this.interval);\r\n            this.interval = null;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    remove() {\r\n        /** @type {?} */\r\n        let el = this.ctx;\r\n        for (let i = this.list.length; i--;) {\r\n            if (this.list[i].element === el) {\r\n                this.list.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\nSkyconsComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'sc-skycons',\r\n                template: `\n    <canvas #skyconCanvas class=\"skycons__canvas\"></canvas>\n  `,\r\n                styles: [`\n    :host {\n      width: 100%;\n      display: inline-block;\n    }\n  `]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nSkyconsComponent.ctorParameters = () => [];\r\nSkyconsComponent.propDecorators = {\r\n    canvas: [{ type: ViewChild, args: ['skyconCanvas',] }],\r\n    weather: [{ type: Input }],\r\n    color: [{ type: Input }],\r\n    resizeClear: [{ type: Input }],\r\n    width: [{ type: Input }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass SkyconsModule {\r\n}\r\nSkyconsModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [SkyconsComponent],\r\n                imports: [],\r\n                exports: [SkyconsComponent]\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { KEYFRAME, STROKE, TAU, TWO_OVER_SQRT_2, SkyconsComponent, SkyconsTypes, SkyconsModule };\n"]}